#! groovy

MAKE='make -f ci/Makefile'

node('docker') {

    currentBuild.displayName = "PR #${env.ghprbPullId}@${env.NODE_NAME}"
    configFileProvider([
        configFile(fileId: 'global', variable: 'GLOBAL'),
    ]) {
        global = load env.GLOBAL
    }
    HOST_MOUNT = sh(
        script: "hostname | xargs -I@ docker inspect @ --format \"{{`{{ (index .Mounts 1).Source }}`}}\"",
        returnStdout: true,
    ).trim()
    CTR_MOUNT = sh(
        script: "hostname | xargs -I@ docker inspect @ --format \"{{`{{ (index .Mounts 1).Destination }}`}}\"",
        returnStdout: true,
    ).trim()
    HOST_WORKSPACE = HOST_MOUNT + (env.WORKSPACE - CTR_MOUNT)

    stage('Checkout') {
        checkout scm
    }

    withEnv([
        "COMMIT_SHA=${env.ghprbActualCommit}",
        "IMAGE_TAG=${env.ghprbActualCommit.substring(0,8)}",
        "PROJECT_NAME={{Name}}-${env.BUILD_NUMBER}",
        "ROOTDIR=${HOST_WORKSPACE}"]) {
        try {
            stage('Unit tests') {
                sh("${MAKE} unit-test")
            }

            stage('Build image') {
                sh("${MAKE} build")
            }

            stage('API tests') {
                sh("${MAKE} api-test")
            }

            stage('Validate test results') {
                junit "**/junit.xml"
                step([
                    $class: 'CoberturaPublisher',
                    autoUpdateHealth: false,
                    autoUpdateStability: false,
                    coberturaReportFile: 'coverage/coverage.xml',
                    failUnhealthy: true,
                    failUnstable: true,
                    maxNumberOfBuilds: 0,
                    onlyStable: false,
                    sourceEncoding: 'ASCII',
                    zoomCoverageChart: false,
                ])  
            }
        } finally {
            stage ('Clean test environment') {
                sh("${MAKE} ci-clean")
            }
        }


        stage('Publish image') {
            def pubSteps = [:]
            for (int i = 0; i < global.PUBLISHERS.size(); i++) {
                def registry = "${global.PUBLISHERS[i]}"
                def stepName  = "publishing image to [${i}] ${registry}"
                pubSteps[stepName] = {
                    sh("${MAKE} push REGISTRY=${registry}")
                }
            }
            parallel pubSteps
        }

        stage('Acceptance tests') {
            sh("${MAKE} ci/version.yml REGISTRY=${global.PUBLISHER_STAGING}")
            build job: env.GLOBAL_ACCEPTANCE_JOB, parameters: [
                text(name: 'VERSION', value: readFile('ci/version.yml')),
                text(name: 'OVERRIDE_BUILD_ID', value:"{{Name}} PR#${ghprbPullId}")
            ]
        }
    }
}
