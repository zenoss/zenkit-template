#! groovy

//
// pull-request/Jenkinsfile - Jenkins script for initiating the {{Name}} microservice build
//
//  output files
//  version.yml         - docker-compose file that describes the version of the image to test
//

node('docker') {
    currentBuild.displayName = "PR #${env.ghprbPullId}@${env.NODE_NAME}"
    configFileProvider([
        configFile(fileId: 'global', variable: 'GLOBAL'),
    ]) {
        global = load env.GLOBAL
    }

    checkout scm
    service = load 'ci/service.groovy'
	SHA=sh(script: 'git rev-parse --short=8 HEAD | tee .image_tag', returnStdout: true)
    sh("echo -n {{Name}}-${env.BUILD_NUMBER} > .project_name")

	try	{
		stage('Run service tests') {
			sh('make test')
		}

		stage('Build service image') {
			sh('make build')
		}

		stage('Run service api tests') {
			sh('make api-test')
		}
	} finally {
		stage ('Clean test environment') {
			sh('make clean')
		}
    }


    stage('Publish image') {
        def pubSteps = [:]
        for (int i = 0; i < global.PUBLISHERS.size(); i++) {
            def imageName = "${global.PUBLISHERS[i]}/${service.DOCKER_IMAGE}:${SHA}"
            def stepName  = "publishing image to [${[i]}] ${imageName}"
            pubSteps[stepName] = {
                sh("make push REMOTE_IMAGE=${imageName}")
            }
        }
        parallel pubSteps
    }

    stage('Promote to staging') {
        def imageName = "${global.PUBLISHER_STAGING}/${service.DOCKER_IMAGE}:${SHA}"
        sh("make version REMOTE_IMAGE=${imageName}")
        archiveArtifacts artifacts: 'version.yaml'
        build job: env.GLOBAL_ACCEPTANCE_JOB, parameters: [
            text(name: 'VERSION', value: readFile('version.yaml'))
        ]
    }
}
