#! groovy

MAKE='make -f ci/Makefile'

node('docker') {
    currentBuild.displayName = "PR #${env.ghprbPullId}@${env.NODE_NAME}"
    configFileProvider([
        configFile(fileId: 'global', variable: 'GLOBAL'),
    ]) {
        global = load env.GLOBAL
    }

    checkout scm
    HOST_MOUNT = sh(
        script: "hostname | xargs -I@ docker inspect @ --format \"{{`{{ (index .Mounts 1).Source }}`}}\"",
        returnStdout: true,
    ).trim()
    CTR_MOUNT = sh(
        script: "hostname | xargs -I@ docker inspect @ --format \"{{`{{ (index .Mounts 1).Destination }}`}}\"",
        returnStdout: true,
    ).trim()
    HOST_WORKSPACE = HOST_MOUNT + (env.WORKSPACE - CTR_MOUNT)
	withEnv([
		"COMMIT_SHA=${env.ghprbActualCommit}",
		"IMAGE_TAG=${env.ghprbActualCommit.substring(0,8)}",
		"PROJECT_NAME={{Name}}-${env.BUILD_NUMBER}",
        "ROOTDIR=${HOST_WORKSPACE}"]) {
		try	{
			stage('Run service tests') {
				sh("${MAKE} unit-test")
			}

			stage('Build service image') {
				sh("${MAKE} build")
			}

			stage('Run service api tests') {
				sh("${MAKE} api-test")
			}

            stage('Publish test reports') {
				junit "**/junit.xml"
				step([
					$class: 'CoberturaPublisher',
					autoUpdateHealth: false,
					autoUpdateStability: false,
					coberturaReportFile: 'coverage/coverage.xml',
					failUnhealthy: true,
					failUnstable: true,
					maxNumberOfBuilds: 0,
					onlyStable: false,
					sourceEncoding: 'ASCII',
					zoomCoverageChart: false,
				])  
            }
		} finally {
			stage ('Clean test environment') {
				sh("${MAKE} ci-clean")
			}
		}


		stage('Publish image') {
			def pubSteps = [:]
			for (int i = 0; i < global.PUBLISHERS.size(); i++) {
				def registry = "${global.PUBLISHERS[i]}"
				def stepName  = "publishing image to [${[i]}] ${registry}"
				pubSteps[stepName] = {
					sh("${MAKE} push REGISTRY=${registry}")
				}
			}
			parallel pubSteps
		}

		stage('Promote to staging') {
			sh("${MAKE} version.yaml REGISTRY=${global.PUBLISHER_STAGING}")
			build job: env.GLOBAL_ACCEPTANCE_JOB, parameters: [
				text(name: 'VERSION', value: readFile('version.yaml')),
				text(name: 'OVERRIDE_BUILD_ID', value:"{{Name}} PR#${ghprbPullId}")
			]
		}
	}
}
